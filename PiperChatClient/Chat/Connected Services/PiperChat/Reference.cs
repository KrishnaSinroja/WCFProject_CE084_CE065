//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chat.PiperChat {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/PiperchatService.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AboutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Security.Cryptography.RSAParameters PublicKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string About {
            get {
                return this.AboutField;
            }
            set {
                if ((object.ReferenceEquals(this.AboutField, value) != true)) {
                    this.AboutField = value;
                    this.RaisePropertyChanged("About");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactNo {
            get {
                return this.ContactNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNoField, value) != true)) {
                    this.ContactNoField = value;
                    this.RaisePropertyChanged("ContactNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Security.Cryptography.RSAParameters PublicKey {
            get {
                return this.PublicKeyField;
            }
            set {
                if ((this.PublicKeyField.Equals(value) != true)) {
                    this.PublicKeyField = value;
                    this.RaisePropertyChanged("PublicKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/PiperchatService.Models")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReceiverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageSent {
            get {
                return this.MessageSentField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageSentField, value) != true)) {
                    this.MessageSentField = value;
                    this.RaisePropertyChanged("MessageSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReceiverId {
            get {
                return this.ReceiverIdField;
            }
            set {
                if ((this.ReceiverIdField.Equals(value) != true)) {
                    this.ReceiverIdField = value;
                    this.RaisePropertyChanged("ReceiverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSent {
            get {
                return this.TimeSentField;
            }
            set {
                if ((this.TimeSentField.Equals(value) != true)) {
                    this.TimeSentField = value;
                    this.RaisePropertyChanged("TimeSent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PiperChat.IMessageService", CallbackContract=typeof(Chat.PiperChat.IMessageServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/Connect")]
        void Connect(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/Connect")]
        System.Threading.Tasks.Task ConnectAsync(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        void SendMessage(Chat.PiperChat.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(Chat.PiperChat.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetConnectedUsers", ReplyAction="http://tempuri.org/IMessageService/GetConnectedUsersResponse")]
        Chat.PiperChat.User[] GetConnectedUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetConnectedUsers", ReplyAction="http://tempuri.org/IMessageService/GetConnectedUsersResponse")]
        System.Threading.Tasks.Task<Chat.PiperChat.User[]> GetConnectedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/Disconnect", ReplyAction="http://tempuri.org/IMessageService/DisconnectResponse")]
        void Disconnect(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/Disconnect", ReplyAction="http://tempuri.org/IMessageService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(Chat.PiperChat.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/ForwardToClient")]
        void ForwardToClient(Chat.PiperChat.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/UsersConnected")]
        void UsersConnected(Chat.PiperChat.User[] users);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : Chat.PiperChat.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.DuplexClientBase<Chat.PiperChat.IMessageService>, Chat.PiperChat.IMessageService {
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(Chat.PiperChat.User user) {
            base.Channel.Connect(user);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(Chat.PiperChat.User user) {
            return base.Channel.ConnectAsync(user);
        }
        
        public void SendMessage(Chat.PiperChat.Message message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Chat.PiperChat.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public Chat.PiperChat.User[] GetConnectedUsers() {
            return base.Channel.GetConnectedUsers();
        }
        
        public System.Threading.Tasks.Task<Chat.PiperChat.User[]> GetConnectedUsersAsync() {
            return base.Channel.GetConnectedUsersAsync();
        }
        
        public void Disconnect(Chat.PiperChat.User user) {
            base.Channel.Disconnect(user);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(Chat.PiperChat.User user) {
            return base.Channel.DisconnectAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PiperChat.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUserRecord", ReplyAction="http://tempuri.org/IUserService/InsertUserRecordResponse")]
        string InsertUserRecord(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUserRecord", ReplyAction="http://tempuri.org/IUserService/InsertUserRecordResponse")]
        System.Threading.Tasks.Task<string> InsertUserRecordAsync(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserRecord", ReplyAction="http://tempuri.org/IUserService/UpdateUserRecordResponse")]
        string UpdateUserRecord(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserRecord", ReplyAction="http://tempuri.org/IUserService/UpdateUserRecordResponse")]
        System.Threading.Tasks.Task<string> UpdateUserRecordAsync(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUserRecord", ReplyAction="http://tempuri.org/IUserService/DeleteUserRecordResponse")]
        string DeleteUserRecord(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUserRecord", ReplyAction="http://tempuri.org/IUserService/DeleteUserRecordResponse")]
        System.Threading.Tasks.Task<string> DeleteUserRecordAsync(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SearchUserRecord", ReplyAction="http://tempuri.org/IUserService/SearchUserRecordResponse")]
        System.Data.DataSet SearchUserRecord(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SearchUserRecord", ReplyAction="http://tempuri.org/IUserService/SearchUserRecordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchUserRecordAsync(Chat.PiperChat.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUserRecords", ReplyAction="http://tempuri.org/IUserService/GetAllUserRecordsResponse")]
        System.Data.DataSet GetAllUserRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUserRecords", ReplyAction="http://tempuri.org/IUserService/GetAllUserRecordsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Validate", ReplyAction="http://tempuri.org/IUserService/ValidateResponse")]
        Chat.PiperChat.User Validate(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Validate", ReplyAction="http://tempuri.org/IUserService/ValidateResponse")]
        System.Threading.Tasks.Task<Chat.PiperChat.User> ValidateAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Chat.PiperChat.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Chat.PiperChat.IUserService>, Chat.PiperChat.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertUserRecord(Chat.PiperChat.User user) {
            return base.Channel.InsertUserRecord(user);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserRecordAsync(Chat.PiperChat.User user) {
            return base.Channel.InsertUserRecordAsync(user);
        }
        
        public string UpdateUserRecord(Chat.PiperChat.User user) {
            return base.Channel.UpdateUserRecord(user);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserRecordAsync(Chat.PiperChat.User user) {
            return base.Channel.UpdateUserRecordAsync(user);
        }
        
        public string DeleteUserRecord(Chat.PiperChat.User user) {
            return base.Channel.DeleteUserRecord(user);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserRecordAsync(Chat.PiperChat.User user) {
            return base.Channel.DeleteUserRecordAsync(user);
        }
        
        public System.Data.DataSet SearchUserRecord(Chat.PiperChat.User user) {
            return base.Channel.SearchUserRecord(user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchUserRecordAsync(Chat.PiperChat.User user) {
            return base.Channel.SearchUserRecordAsync(user);
        }
        
        public System.Data.DataSet GetAllUserRecords() {
            return base.Channel.GetAllUserRecords();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllUserRecordsAsync() {
            return base.Channel.GetAllUserRecordsAsync();
        }
        
        public Chat.PiperChat.User Validate(string email, string password) {
            return base.Channel.Validate(email, password);
        }
        
        public System.Threading.Tasks.Task<Chat.PiperChat.User> ValidateAsync(string email, string password) {
            return base.Channel.ValidateAsync(email, password);
        }
    }
}
